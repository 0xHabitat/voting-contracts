const fs = require('fs');
const utils = require('ethereumjs-util');

const CONFIG = {
    fileName: {
        booth: "boothAddrs.txt",
        yes: "yesAddrs.txt",
        no: "noAddrs.txt",
        json: "proposals.json"
    },
    howMany: 96
}

function replaceAll(str, find, replace) {
    return str.replace(new RegExp(find, 'g'), replace.replace('0x', '').toLowerCase());
}

function generateProposal(motionId) {
    let boxCode = '608060405234801561001057600080fd5b50600436106100395760e060020a60003504635ca740ab811461003e578063edf1baa21461007b575b600080fd5b6100796004803603608081101561005457600080fd5b50600160a060020a038135169060ff602082013516906040810135906060013561012b565b005b6100796004803603608081101561009157600080fd5b81359190810190604081016020820135602060020a8111156100b257600080fd5b8201836020820111156100c457600080fd5b803590602001918460018302840111602060020a831117156100e557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356102ff565b60008061013a30868686610830565b909250905060018215151461018d576040805160e560020a62461bcd02815260206004820152600e6024820152609260020a6d1c9958dbdd995c8819985a5b195902604482015290519081900360640190fd5b600160a060020a038116737891111111111111111111111111111111111789146101fc576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a6370a08231028152306004820181905291518892600160a060020a0384169263a9059cbb9284916370a08231916024808301926020929190829003018186803b15801561025157600080fd5b505afa158015610265573d6000803e3d6000fd5b505050506040513d602081101561027b57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b505050506040513d60208110156102f457600080fd5b505050505050505050565b8115156103405760405160e560020a62461bcd028152600401808060200182810382526029815260200180610a3f6029913960400191505060405180910390fd5b60008111610396576040805160e560020a62461bcd0281526020600482015260186024820152604060020a7763616e206e6f74207769746864726177206e6f7468696e6702604482015290519081900360640190fd5b6040805160e060020a6337ebbc030281526004810186905290517334511111111111111111111111111111111113459160009183916337ebbc03916024808301926020929190829003018186803b1580156103f057600080fd5b505afa158015610404573d6000803e3d6000fd5b505050506040513d602081101561041a57600080fd5b5051905061042f8465deadbeef00018761086d565b811461047a576040805160e560020a62461bcd02815260206004820152600f6024820152608a60020a6e1c1c9bdbd9881b9bdd081d985b1a5902604482015290519081900360640190fd5b6000808512156104de5761049365deadbeef00026109e6565b156104d25760405160e560020a62461bcd028152600401808060200182810382526028815260200180610a8f6028913960400191505060405180910390fd5b84600019029050610530565b6104ed65deadbeef00026109e6565b151561052d5760405160e560020a62461bcd028152600401808060200182810382526029815260200180610a166029913960400191505060405180910390fd5b50835b808411156105725760405160e560020a62461bcd028152600401808060200182810382526027815260200180610a686027913960400191505060405180910390fd5b838103905060007312311111111111111111111111111111111111239050600084600160a060020a0316636352211e8a6040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b1580156105d957600080fd5b505afa1580156105ed573d6000803e3d6000fd5b505050506040513d602081101561060357600080fd5b50519050600086610613896109f8565b03905080800288800203670de0b6b3a76400008104905083600160a060020a031663a9059cbb84836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561068d57600080fd5b505af11580156106a1573d6000803e3d6000fd5b505050506040513d60208110156106b757600080fd5b50506040805160e060020a63a9059cbb0281527345611111111111111111111111111111111114566004820152602481018a905290517323411111111111111111111111111111111112349163a9059cbb9160448083019260209291908290030181600087803b15801561072a57600080fd5b505af115801561073e573d6000803e3d6000fd5b505050506040513d602081101561075457600080fd5b5050600160a060020a03871663a983d43f8c6107778865deadbeef00018f61086d565b6040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050600060405180830381600087803b1580156107b757600080fd5b505af11580156107cb573d6000803e3d6000fd5b505050506107de65deadbeef00026109e6565b604080518a8152905191151591600191600160a060020a038716917fb06edf4c1996c210275f4f14f22838b16888d5302f4c960ff531ef9574f615509181900360200190a45050505050505050505050565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b8051600090602090600119010615801561088a5750610122825111155b15156108da576040805160e560020a62461bcd0281526020600482015260146024820152606260020a731a5b9d985b1a59081c1c9bdbd988199bdc9b585d02604482015290519081900360640190fd5b6020820151600090859060029060f060020a900486845b60098110156109d85760018316151561090d5760009550610974565b6020840193508361ffff1688511015151561096d576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e0e4dedecc40dcdee840d8dedcce40cadcdeeaced02604482015290519081900360640190fd5b8388015195505b84158015610980575085155b1561098e57600094506109bc565b6001821615156109ac578460005285602052604060002094506109bc565b8560005284602052604060002094505b600261ffff8416049250600261ffff83160491506001016108f1565b509298975050505050505050565b600065ffffffffffff8216115b919050565b600080821215610a0e57816000190290506109f3565b50806109f356fe63616e206f6e6c792077697468647261772066726f6d207965732d626f782069662062616c203e20306e6f207769746864726177616c20706f737369626c65206966206e6f20766f74657320706c6163656463616e206e6f74207769746864726177206d6f726520766f746573207468616e20706c6163656463616e206f6e6c792077697468647261772066726f6d206e6f2d626f782069662062616c203c2030a165627a7a72305820d68e84d63667dc56a916f53a93ce2ff704ab657d79cb250a4a2303c024ac00770029';
    let boothCode = '608060405234801561001057600080fd5b50600436106100395760e060020a60003504635ca740ab811461003e5780636b0f34061461007b575b600080fd5b6100796004803603608081101561005457600080fd5b50600160a060020a038135169060ff602082013516906040810135906060013561012b565b005b6100796004803603608081101561009157600080fd5b81359190810190604081016020820135602060020a8111156100b257600080fd5b8201836020820111156100c457600080fd5b803590602001918460018302840111602060020a831117156100e557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356102ff565b60008061013a3086868661076b565b909250905060018215151461018d576040805160e560020a62461bcd02815260206004820152600e6024820152609260020a6d1c9958dbdd995c8819985a5b195902604482015290519081900360640190fd5b600160a060020a038116737891111111111111111111111111111111111789146101fc576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a6370a08231028152306004820181905291518892600160a060020a0384169263a9059cbb9284916370a08231916024808301926020929190829003018186803b15801561025157600080fd5b505afa158015610265573d6000803e3d6000fd5b505050506040513d602081101561027b57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b505050506040513d60208110156102f457600080fd5b505050505050505050565b6040805160e060020a6337ebbc030281526004810186905290517334511111111111111111111111111111111113459160009183916337ebbc03916024808301926020929190829003018186803b15801561035957600080fd5b505afa15801561036d573d6000803e3d6000fd5b505050506040513d602081101561038357600080fd5b505190506103988465deadbeef0001876107a8565b81146103e3576040805160e560020a62461bcd02815260206004820152600f6024820152608a60020a6e1c1c9bdbd9881b9bdd081d985b1a5902604482015290519081900360640190fd5b60008085121561045d57848412610442576040805160e560020a62461bcd0281526020600482015260186024820152604060020a7763616e206e6f74206465637265617365206e6f20766f746502604482015290519081900360640190fd5b507356711111111111111111111111111111111115676104ca565b8484136104b3576040805160e560020a62461bcd0281526020600482015260196024820152603860020a7863616e206e6f742064656372656173652079657320766f746502604482015290519081900360640190fd5b507345611111111111111111111111111111111114565b6000670de0b6b3a76400008680028680020304905060007312311111111111111111111111111111111111239050600085600160a060020a0316636352211e8b6040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b15801561054157600080fd5b505afa158015610555573d6000803e3d6000fd5b505050506040513d602081101561056b57600080fd5b50516040805160e060020a6323b872dd028152600160a060020a0380841660048301528781166024830152604482018790529151929350908416916323b872dd916064808201926020929091908290030181600087803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b505050506040513d60208110156105f857600080fd5b50732341111111111111111111111111111111111234905063a9059cbb856106218b8b03610921565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561067357600080fd5b505af1158015610687573d6000803e3d6000fd5b505050506040513d602081101561069d57600080fd5b5050600160a060020a03861663a983d43f8b6106c08a65deadbeef00018e6107a8565b6040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050600060405180830381600087803b15801561070057600080fd5b505af1158015610714573d6000803e3d6000fd5b505060408051868152905160008b13935060019250600160a060020a038516917fe88d7264516faa76a22f83e03b5b21c08e92f286599e40b22fe89f5cc89b2e77919081900360200190a450505050505050505050565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b805160009060209060011901061580156107c55750610122825111155b1515610815576040805160e560020a62461bcd0281526020600482015260146024820152606260020a731a5b9d985b1a59081c1c9bdbd988199bdc9b585d02604482015290519081900360640190fd5b6020820151600090859060029060f060020a900486845b60098110156109135760018316151561084857600095506108af565b6020840193508361ffff168851101515156108a8576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e0e4dedecc40dcdee840d8dedcce40cadcdeeaced02604482015290519081900360640190fd5b8388015195505b841580156108bb575085155b156108c957600094506108f7565b6001821615156108e7578460005285602052604060002094506108f7565b8560005284602052604060002094505b600261ffff8416049250600261ffff831604915060010161082c565b509298975050505050505050565b600080821215610937578160001902905061093a565b50805b91905056fea165627a7a7230582032de942cb7719fbb8a500557364441f0d2691f28d3c6b37aa55b0d1f1f4f64990029';
    

    const voiceCredAddr = '0x8f8FDcA55F0601187ca24507d4A1fE1b387Db90B';
    const votesAddr = '0x3442c197cc858bED2476BDd9c7d4499552780f3D';
    const balCardAddr = '0xCD1b3a9a7B5f84BC7829Bc7e6e23adb1960beE97';
    const trashAddr =   '0xDB3D918dF2cb3E5486CfC39b188c6f2B268a6511';
    const YES = '000000000001';
    const NO = '000000000000';
    const motionId48 = "00000000000" + motionId.toString(16).slice(-12);
    
    boxCode = replaceAll(boxCode, '1231111111111111111111111111111111111123', voiceCredAddr);
    boxCode = replaceAll(boxCode, '2341111111111111111111111111111111111234', votesAddr);
    boxCode = replaceAll(boxCode, '3451111111111111111111111111111111111345', balCardAddr);
    boxCode = replaceAll(boxCode, '4561111111111111111111111111111111111456', trashAddr);
    boxCode = replaceAll(boxCode, 'deadbeef0001', motionId48);
    const yesCode = replaceAll(boxCode, 'deadbeef0002', YES);
    const noCode = replaceAll(boxCode, 'deadbeef0002', NO);
    const yes = {
        address: `0x${utils.ripemd160(Buffer.from(yesCode, 'hex')).toString('hex')}`,
        code: yesCode
    };
    const no = {
        address: `0x${utils.ripemd160(Buffer.from(noCode, 'hex')).toString('hex')}`,
        code: noCode
    };

    boothCode = replaceAll(boothCode, '1231111111111111111111111111111111111123', voiceCredAddr);
    boothCode = replaceAll(boothCode, '2341111111111111111111111111111111111234', votesAddr);
    boothCode = replaceAll(boothCode, '3451111111111111111111111111111111111345', balCardAddr);
    boothCode = replaceAll(boothCode, '4561111111111111111111111111111111111456', yes.address);
    boothCode = replaceAll(boothCode, '5671111111111111111111111111111111111567', no.address);
    boothCode = replaceAll(boothCode, 'deadbeef0001', motionId48);

    return {
        booth: {
            address: `0x${utils.ripemd160(Buffer.from(boothCode, 'hex')).toString('hex')}`,
            code: boothCode
        },
        yes: yes,
        no: no
    }
}

async function main() {
    const propJson = [];
    for (let i = 0; i < CONFIG.howMany; i++) {
        const proposal = generateProposal(i);
        fs.appendFileSync(CONFIG.fileName.booth, proposal.booth.address+"\n");
        fs.appendFileSync(CONFIG.fileName.yes, proposal.yes.address+"\n");
        fs.appendFileSync(CONFIG.fileName.no, proposal.no.address+"\n");
        propJson.push({
            title: "",
            topic:[],
            proposalId: "",
            description: "",
            boothAddress: proposal.booth.address,
            noBoxAddress: proposal.no.address,
            yesBoxAddress: proposal.yes.address
        })
    }
    const json = {
        proposals: propJson,
        voteEndTime: "",
        voteStartTime: ""
    }
    fs.writeFileSync(CONFIG.fileName.json, JSON.stringify(json, null, 2));
}

main();
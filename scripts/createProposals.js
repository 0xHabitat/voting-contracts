const fs = require('fs');
const utils = require('ethereumjs-util');

const CONFIG = {
    fileName: {
        booth: "boothAddrs.txt",
        yes: "yesAddrs.txt",
        no: "noAddrs.txt",
        json: "proposals.json"
    },
    howMany: 96
}

function replaceAll(str, find, replace) {
    return str.replace(new RegExp(find, 'g'), replace.replace('0x', ''));
}

function generateProposal(motionId) {
    let boothCode = '608060405234801561001057600080fd5b50600436106100395760e060020a60003504636b0f3406811461003e578063f67fcc4c146100f0575b600080fd5b6100ee6004803603608081101561005457600080fd5b81359190810190604081016020820135602060020a81111561007557600080fd5b82018360208201111561008757600080fd5b803590602001918460018302840111602060020a831117156100a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020013561011c565b005b6100ee6004803603606081101561010657600080fd5b5060ff8135169060208101359060400135610538565b6040805160e060020a6337ebbc030281526004810186905290517334511111111111111111111111111111111113459160009183916337ebbc03916024808301926020929190829003018186803b15801561017657600080fd5b505afa15801561018a573d6000803e3d6000fd5b505050506040513d60208110156101a057600080fd5b505190506101b58465deadbeef000187610723565b8114610200576040805160e560020a62461bcd02815260206004820152600f6024820152608a60020a6e1c1c9bdbd9881b9bdd081d985b1a5902604482015290519081900360640190fd5b60008085121561027a5784841261025f576040805160e560020a62461bcd0281526020600482015260186024820152604060020a7763616e206e6f74206465637265617365206e6f20766f746502604482015290519081900360640190fd5b507356711111111111111111111111111111111115676102e7565b8484136102d0576040805160e560020a62461bcd0281526020600482015260196024820152603860020a7863616e206e6f742064656372656173652079657320766f746502604482015290519081900360640190fd5b507345611111111111111111111111111111111114565b6040805160e160020a6331a9108f028152600481018990529051670de0b6b3a76400008780028780020304917312311111111111111111111111111111111111239182916323b872dd91600160a060020a03891691636352211e916024808301926020929190829003018186803b15801561036157600080fd5b505afa158015610375573d6000803e3d6000fd5b505050506040513d602081101561038b57600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a0392831660048201529187166024830152604482018690525160648083019260209291908290030181600087803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b505050506040513d602081101561040b57600080fd5b5073234111111111111111111111111111111111123490508063a9059cbb856104358b8b0361089c565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561048757600080fd5b505af115801561049b573d6000803e3d6000fd5b505050506040513d60208110156104b157600080fd5b5050600160a060020a03861663a983d43f8b6104d48a65deadbeef00018e610723565b6040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050600060405180830381600087803b15801561051457600080fd5b505af1158015610528573d6000803e3d6000fd5b5050505050505050505050505050565b604080516000815260208082018084526001606060020a0319606060020a300216905260ff861682840152606082018590526080820184905291517378911111111111111111111111111111111117899260019260a080820193601f1981019281900390910190855afa1580156105b3573d6000803e3d6000fd5b50505060206040510351600160a060020a0316141515610618576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a6370a082310281523060048201819052915173234111111111111111111111111111111111123492839263a9059cbb9284916370a08231916024808301926020929190829003018186803b15801561067857600080fd5b505afa15801561068c573d6000803e3d6000fd5b505050506040513d60208110156106a257600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156106f157600080fd5b505af1158015610705573d6000803e3d6000fd5b505050506040513d602081101561071b57600080fd5b505050505050565b805160009060209060011901061580156107405750610122825111155b1515610790576040805160e560020a62461bcd0281526020600482015260146024820152606260020a731a5b9d985b1a59081c1c9bdbd988199bdc9b585d02604482015290519081900360640190fd5b6020820151600090859060029060f060020a900486845b600981101561088e576001831615156107c3576000955061082a565b6020840193508361ffff16885110151515610823576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e0e4dedecc40dcdee840d8dedcce40cadcdeeaced02604482015290519081900360640190fd5b8388015195505b84158015610836575085155b156108445760009450610872565b60018216151561086257846000528560205260406000209450610872565b8560005284602052604060002094505b600261ffff8416049250600261ffff83160491506001016107a7565b509298975050505050505050565b6000808212156108b257816000190290506108b5565b50805b91905056fea165627a7a72305820b46371bc3d392ca51d2277f2b1a2359ee3c081181e21e927105e830b178a7ef60029';
    let boxCode = '608060405234801561001057600080fd5b50600436106100395760e060020a6000350463edf1baa2811461003e578063f67fcc4c146100f0575b600080fd5b6100ee6004803603608081101561005457600080fd5b81359190810190604081016020820135602060020a81111561007557600080fd5b82018360208201111561008757600080fd5b803590602001918460018302840111602060020a831117156100a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020013561011c565b005b6100ee6004803603606081101561010657600080fd5b5060ff8135169060208101359060400135610589565b6000821361015e5760405160e560020a62461bcd0281526004018080602001828103825260298152602001806109286029913960400191505060405180910390fd5b6040805160e060020a6337ebbc030281526004810186905290517334511111111111111111111111111111111113459160009183916337ebbc03916024808301926020929190829003018186803b1580156101b857600080fd5b505afa1580156101cc573d6000803e3d6000fd5b505050506040513d60208110156101e257600080fd5b505190506101f78465deadbeef000187610774565b8114610242576040805160e560020a62461bcd02815260206004820152600f6024820152608a60020a6e1c1c9bdbd9881b9bdd081d985b1a5902604482015290519081900360640190fd5b6000808512156102a65761025b65deadbeef00026108ed565b1561029a5760405160e560020a62461bcd0281526004018080602001828103825260288152602001806109786028913960400191505060405180910390fd5b846000190290506102f8565b6102b565deadbeef00026108ed565b15156102f55760405160e560020a62461bcd0281526004018080602001828103825260298152602001806108ff6029913960400191505060405180910390fd5b50835b8084111561033a5760405160e560020a62461bcd0281526004018080602001828103825260278152602001806109516027913960400191505060405180910390fd5b83810390506000731231111111111111111111111111111111111123905080600160a060020a031663a9059cbb85600160a060020a0316636352211e8b6040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b1580156103ae57600080fd5b505afa1580156103c2573d6000803e3d6000fd5b505050506040513d60208110156103d857600080fd5b5051670de0b6b3a7640000888002046040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561043957600080fd5b505af115801561044d573d6000803e3d6000fd5b505050506040513d602081101561046357600080fd5b50506040805160e060020a63a9059cbb028152734561111111111111111111111111111111111456600482015260248101879052905173234111111111111111111111111111111111123491829163a9059cbb916044808201926020929091908290030181600087803b1580156104d957600080fd5b505af11580156104ed573d6000803e3d6000fd5b505050506040513d602081101561050357600080fd5b5050600160a060020a03851663a983d43f8a6105268665deadbeef00018d610774565b6040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050600060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b50505050505050505050505050565b604080516000815260208082018084526001606060020a0319606060020a300216905260ff861682840152606082018590526080820184905291517378911111111111111111111111111111111117899260019260a080820193601f1981019281900390910190855afa158015610604573d6000803e3d6000fd5b50505060206040510351600160a060020a0316141515610669576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a6370a082310281523060048201819052915173234111111111111111111111111111111111123492839263a9059cbb9284916370a08231916024808301926020929190829003018186803b1580156106c957600080fd5b505afa1580156106dd573d6000803e3d6000fd5b505050506040513d60208110156106f357600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b505050506040513d602081101561076c57600080fd5b505050505050565b805160009060209060011901061580156107915750610122825111155b15156107e1576040805160e560020a62461bcd0281526020600482015260146024820152606260020a731a5b9d985b1a59081c1c9bdbd988199bdc9b585d02604482015290519081900360640190fd5b6020820151600090859060029060f060020a900486845b60098110156108df57600183161515610814576000955061087b565b6020840193508361ffff16885110151515610874576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e0e4dedecc40dcdee840d8dedcce40cadcdeeaced02604482015290519081900360640190fd5b8388015195505b84158015610887575085155b1561089557600094506108c3565b6001821615156108b3578460005285602052604060002094506108c3565b8560005284602052604060002094505b600261ffff8416049250600261ffff83160491506001016107f8565b509298975050505050505050565b600065ffffffffffff82161191905056fe63616e206f6e6c792077697468647261772066726f6d207965732d626f782069662062616c203e20306e6f207769746864726177616c20706f737369626c65206966206e6f20766f74657320706c6163656463616e206e6f74207769746864726177206d6f726520766f746573207468616e20706c6163656463616e206f6e6c792077697468647261772066726f6d206e6f2d626f782069662062616c203c2030a165627a7a72305820389d7e8b558605c937e7cec3089e6b696f9a34a93a64785667521a8a4ab5401e0029';

    const voiceCredAddr = '0x8f8FDcA55F0601187ca24507d4A1fE1b387Db90B';
    const votesAddr = '0x3442c197cc858bED2476BDd9c7d4499552780f3D';
    const balCardAddr = '0xCD1b3a9a7B5f84BC7829Bc7e6e23adb1960beE97';
    const trashAddr =   '0x0000000000000000000000000000000000000000';
    const YES = '000000000001';
    const NO = '000000000000';
    const motionId48 = "00000000000" + motionId.toString(16).slice(-12);
    
    boxCode = replaceAll(boxCode, '1231111111111111111111111111111111111123', voiceCredAddr.replace('0x', '').toLowerCase());
    boxCode = replaceAll(boxCode, '2341111111111111111111111111111111111234', votesAddr.replace('0x', '').toLowerCase());
    boxCode = replaceAll(boxCode, '3451111111111111111111111111111111111345', balCardAddr.replace('0x', '').toLowerCase());
    boxCode = replaceAll(boxCode, '4561111111111111111111111111111111111456', trashAddr.replace('0x', '').toLowerCase());
    boxCode = replaceAll(boxCode, 'deadbeef0001', motionId48);
    const yesCode = replaceAll(boxCode, 'deadbeef0002', YES);
    const noCode = replaceAll(boxCode, 'deadbeef0002', NO);
    const yes = {
        address: `0x${utils.ripemd160(Buffer.from(yesCode, 'hex')).toString('hex')}`,
        code: yesCode
    };
    const no = {
        address: `0x${utils.ripemd160(Buffer.from(noCode, 'hex')).toString('hex')}`,
        code: noCode
    };

    boothCode = replaceAll(boothCode, '1231111111111111111111111111111111111123', voiceCredAddr.replace('0x', '').toLowerCase());
    boothCode = replaceAll(boothCode, '2341111111111111111111111111111111111234', votesAddr.replace('0x', '').toLowerCase());
    boothCode = replaceAll(boothCode, '3451111111111111111111111111111111111345', balCardAddr.replace('0x', '').toLowerCase());
    boothCode = replaceAll(boothCode, '4561111111111111111111111111111111111456', yes.address.replace('0x', '').toLowerCase());
    boothCode = replaceAll(boothCode, '5671111111111111111111111111111111111567', no.address.replace('0x', '').toLowerCase());
    boothCode = replaceAll(boothCode, 'deadbeef0001', motionId48);

    return {
        booth: {
            address: `0x${utils.ripemd160(Buffer.from(boothCode, 'hex')).toString('hex')}`,
            code: boothCode
        },
        yes: yes,
        no: no
    }
}

async function main() {
    const propJson = [];
    for (let i = 0; i < CONFIG.howMany; i++) {
        const proposal = generateProposal(i);
        fs.appendFileSync(CONFIG.fileName.booth, proposal.booth.address+"\n");
        fs.appendFileSync(CONFIG.fileName.yes, proposal.yes.address+"\n");
        fs.appendFileSync(CONFIG.fileName.no, proposal.no.address+"\n");
        propJson.push({
            title: "",
            topic:[],
            proposalId: "",
            description: "",
            boothAddress: proposal.booth.address,
            noBoxAddress: proposal.no.address,
            yesBoxAddress: proposal.yes.address
        })
    }
    const json = {
        proposals: propJson,
        voteEndTime: "",
        voteStartTime: ""
    }
    fs.writeFileSync(CONFIG.fileName.json, JSON.stringify(json));
}

main();